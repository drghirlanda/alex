#!/usr/local/bin/pebl-language

define Start( par ) {

  ## Giving parameter 'test' skips instructions and demographics
  ## collection
  if( IsList(par) and Sum( Match( par, "test" ) ) ) {
    test <- 1
  } else {
    test <- 0
  }

  ReadParameters()

  ## Initialize basic display elements
  fg <- Parameter( "ForegroundColor" )
  bg <- Parameter( "BackgroundColor" )
  gWindow <- MakeWindow( bg )
  gBackgroundColor <- MakeColor( bg )
  gColor <- MakeColor( fg )
  gFont <- MakeFont( Parameter("FontName")+".ttf", 0, 
    ToNumber(Parameter("FontSize")), gColor, gBackgroundColor, 1 )

  ReadSubjectInfo() # gSubjectsHeader, gSubjectInfo
  ReadPhases() # gPhase + Names, Stimuli, Rewards, Presentations
  ReadStimuli() #  gStim + Names, Shapes, Colors, XOffsets, YOffsets

  if( not test ) {
    ShowInstructions()
  }

  if( test ) {
    gSex <- "NA"
    gAge <- "NA"
  } else {
    gSex <- GetEasyChoice( "Please select your sex", 
    	 ["Male", "Female"], ["M", "F"], gWindow )
    gAge <- GetEasyInput( "Please enter your age in years, then press enter:", 
         gWindow )
    gAge <- ToInteger( gAge )
  }

  if( not test ) {
    startMsg <- MakeTextBox( "Press the spacebar to start the experiment",
      gFont, .8*gVideoWidth, gVideoHeight/2 )
    AddObject( startMsg, gWindow )
    Move( startMsg, .2*gVideoWidth, gVideoHeight/2 )
    Draw()
    WaitForKeyDown(" ")
    Hide( startMsg )
    Draw()
    Wait( 2000 )
  }

  ShowCursor( 0 )

  ## Load smiley face to be used as US
  gSmiley <- MakeImage( "Media/smiley-small.png" )
  AddObject( gSmiley, gWindow )
  Move( gSmiley, gVideoWidth/2, gVideoHeight/2 - 100 )
  Hide( gSmiley )

  ## Print datafile header (gDataFile has been opened by
  ## ReadSubjectInfo() to avoid race conditions with acquiring and
  ## releasing the lock to Subjects.csv)
  loop( field, gSubjectHeader ) {
    FilePrint_( gDataFile, field + "," )
  } 
  FilePrint( gDataFile, 
    "Sex,Age,Phase,Trial,Stimulus,RewardPr,Responses,RTs,Rewards" )

  loop( p, Levels( gPhaseNames ) ) {
    RunPhase( p )
  }

  FileClose( gDataFile )
  ShowEnd()
  ShowCursor( 1 )
}

define OneTrial( stimulus, rewardProb ) {
  Draw()
  n <- Length( gStimNames )
  trialStimuli <- []
  # The 'stimulus' may actually be a compound, so we split it into
  # individual letters and we build a list of stimuli for this trial
  # by looking the stimulus objects up in the gStimuli list.
  loop( stimName, SplitString(stimulus, "") ) {
  	i <- Lookup( stimName, gStimNames, Sequence(1,n,1) )
	PushOnEnd( trialStimuli, Nth( gStimuli, i ) )
  }
  # Now we show all stimulus objects
  loop( stim, trialStimuli ) {
    Show( stim )
  }
  Draw()
  maxResponses <- ToNumber( Parameter("MaxResponses") )
  csDuration   <- ToNumber( Parameter("CSDuration") )
  csusInterval <- ToNumber( Parameter("CSUSInterval") )
  usDuration   <- ToNumber( Parameter("USDuration") )
  times        <- []
  rewards      <- []
  timeLeft     <- ToNumber( csDuration )
  startTime    <- GetTime()
  while( Length(times)<maxResponses and timeLeft>1 ) {
    key <- WaitForListKeyPressWithTimeout([" "], timeLeft, 1 )
    rt <- GetTime() - startTime
    timeLeft <- csDuration - rt
    if( timeLeft > 1 ) {
      PushOnEnd( times, rt )
      if( Random() < rewardProb ) {
        PushOnEnd( rewards, 1 )
        Wait( csusInterval )
        Show( gSmiley )
        Draw()
        Wait( usDuration )
        Hide( gSmiley )
        Draw()
      } else {
        PushOnEnd( rewards, 0 )
      }
    }
  }
  loop( stim, trialStimuli ) {
    Hide( stim )
  }
  Draw()
  if( not Length(times) ) {
    times <- "NA"
    rewards <- "NA"
  }
  return [times, rewards]
}

define ReadSubjectInfo() {
  subjectsFile <- "Design/Subjects.csv"
  LockFile( subjectsFile )
  subjects <- ReadCSV( subjectsFile )
  gSubjectHeader <- Nth( subjects, 1 )
  found <- 0
  if( not IsDirectory( "Data" ) ) {
    MakeDirectory( "Data" )
  }
  loop( s, Rest(subjects) ) {
    gDataFilename <- "Data/" + Nth(s,1) + ".dat"
    if( not FileExists( gDataFilename ) ) {
      found <- 1
      Print_( "Running subject: " )
      PrintList( s )
      break
    }
  }
  ## Open data file before releasing lock, to prevent race conditions
  if( found ) {
    gSubjectInfo <- s
    gDataFile <- FileOpenWrite( gDataFilename )
    UnlockFile( subjectsFile )
  } else {
    UnlockFile( subjectsFile )
    text <- "It looks like all subjects have been run!

Press 'q' to quit"
    box <- MakeTextBox( text, gFont, .8*gVideoWidth, gVideoHeight )
    AddObject( box, gWindow )
    Move( box, .1*gVideoWidth, .1*gVideoHeight )
    Draw()
    WaitForKeyDown("q")
  }
}

define RunPhase( phaseName ) {
  # Get stimulus settings for this phase. Each line in Phases.csv
  # contains a stimulus entry for a specific phase. Thus we find all
  # entries with this phaseName and use their indices to build
  # stimulus, presentations, and rewards variables for this phase
  idx           <- Match( gPhaseNames, phaseName )
  stimuli       <- Filter( gPhaseStimuli, idx )
  presentations <- Filter( gPhasePresentations, idx )
  rewards       <- Filter( gPhaseRewards, idx )

  ## trialStimuli and trialRewards contain stimuli and rewards
  ## repeated as many times as given in 'presentations'. The order of
  ## presentation is then randomized by picking stimuli from a
  ## shuffled list 'trialOrder', see end of block
  trialStimuli <- []
  trialRewards <- []
  loop( i, Sequence( 1, Length(stimuli), 1 ) ) {
    n <- ToNumber( Nth(presentations, i) )
    PushOnEnd( trialStimuli, Repeat( Nth(stimuli, i), n ) )
    PushOnEnd( trialRewards, Repeat( Nth(rewards, i), n ) )
  }
  trialStimuli <- Flatten( trialStimuli ) # Nesting is undersired
  trialRewards <- Flatten( trialRewards )
  trialOrder <- Shuffle( Sequence(1, Length(trialStimuli), 1) )

  maxTrial <- Length( trialStimuli )
  trial    <- 1
  while( trial <= maxTrial ) {
    ## Get stimulus and RewardPr for this trial:
    thisTrial <- Nth(trialOrder, trial)
    stimulus  <- Nth( trialStimuli, thisTrial )
    rewardPr  <- ToNumber( Nth( trialRewards, thisTrial ) )
    ## Run trial and get response times and rewards collected
    results   <- OneTrial( stimulus, rewardPr )
    times     <- Nth(results, 1)
    rewards   <- Nth(results, 2)
    ## Save all data to file:
    FilePrintCSV_( gDataFile, Flatten( [ gSubjectInfo, 
      gSex, gAge, phaseName, trial, stimulus, rewardPr] ) )
    FilePrint_( gDataFile, "," )
    If( IsList(times) ) {
      FilePrint_( gDataFile, Length(times) + ","+gQuote )
      FilePrintCSV_( gDataFile, times )
      FilePrint_( gDataFile, gQuote+","+gQuote )
      FilePrintCSV_( gDataFile, rewards )
      FilePrint( gDataFile, gQuote )
    } else {
      FilePrint( gDataFile, "0,NA,NA" )
    }
    ## Wait an inter-trial interval and advance to next trial: 
    minITI <- ToNumber( Parameter("MinITI") )
    maxITI <- ToNumber( Parameter("MinITI") )
    Wait( minITI + ( maxITI - minITI )*Random() )
    trial <- trial + 1
  }
}

define FilePrintCSV_( file, data ) {
  n <- Length(data)
  if( n==1 ) {
    FilePrint_( file, Nth(data,1) )
  } else {
    front <- Subset( data, Sequence(1,n-1,1) )
    loop( d, front ) {
    	if( FindInString( ToString(d), ",", 0) ) {
	  d <- gQuote + d + gQuote 
	}
        FilePrint_( file, d + "," )
    }
    last <- Last(data)
    if( FindInString( ToString(last), ",", 0) ) {
      last <- gQuote + last + gQuote 
    }
    FilePrint_( file, last )
  }
}

define ShowInstructions() {
  instrText <- FileReadText("Design/Instructions.txt")
  instrText <- instrText + "Please press the space bar to begin"
  instrFont <- MakeFont("Vera.ttf", 0, 24, gColor, gBackgroundColor, 1 )
  instrBox  <- MakeTextBox(instrText, instrFont, 
                 .9*gVideoWidth, .95*gVideoHeight)
  AddObject( instrBox, gWindow )
  Move( instrBox, .05*gVideoWidth, .05*gVideoHeight )
  Draw()
  WaitForKeyDown(" ")
  RemoveObject( instrBox, gWindow )
  Draw()
  Wait( 1000 )
}

define LockFile( file ) {
  while( FileExists( file+".lck" ) ) {
    Wait( 250 )
  }
  FileOpenOverWrite( file+".lck" ) 
}

define UnlockFile( file ) {
  if( FileExists( file+".lck" ) ) {
    SystemCall( "/bin/rm " + file + ".lck" )
  }
}

define ShowEnd() {
  endText <- "You're done, thanks for your participation!

You will now receive a handout with an explanation of the experiment."
  endBox <- MakeTextBox( endText, gFont, .8*gVideoWidth, gVideoHeight )
  AddObject( endBox, gWindow )
  Move( endBox, .1*gVideoWidth, .1*gVideoHeight )
  Draw()
  WaitForKeyDown("q")
}

define MakeColorRGBString( color ) {
  ## If 'color' starts with '=', we expect a stimulus name after, and
  ## we use that stimulus' color:
  if( SubString(color,1,1) == "=" ) {
    s <- SubString(color,2,StringLength(color)-1)
    color <- Lookup( s, gStimNames, gStimColors )
    if( IsList(color) ) {
      SignalFatalError("Can't find stimulus "+s+" in color substitution")
    }
  }
  ## If 'color' starts with '*', we look up the color in gSubjectInfo:
  if( SubString(color,1,1) == "*" ) {
    stimulus <- SubString(color,2,1) 
    color <- Lookup( stimulus+"Color", gSubjectHeader, gSubjectInfo )
  }
  ## Now we see whether color is a name or RGB triplet, and act
  ## accordingly:
  components <- SplitString( color, "," )
  if( Length(components) != 3 ) { ## treat as color name
    c <- MakeColor( color )
  } else {
    cred <- ToNumber( Nth(components, 1) )
    cgreen <- ToNumber( Nth(components, 2) )
    cblue <- ToNumber( Nth(components, 3) )
    c <- MakeColorRGB( cred, cgreen, cblue )
  }
  return c
}

define ReadStimuli() {
  csv <- ReadCSV( "Design/Stimuli.csv" )
  gStimNames <- []
  gStimShapes <- []
  gStimColors <- []
  gStimXOffsets <- []
  gStimYOffsets <- []
  loop( s, Rest( csv ) ) {
    PushOnEnd( gStimNames, Nth( s, 1 ) )
    PushOnEnd( gStimShapes, Nth( s, 2 ) )
    PushOnEnd( gStimColors, Nth( s, 3 ) )
    PushOnEnd( gStimXOffsets, Nth( s, 4 ) )
    PushOnEnd( gStimYOffsets, Nth( s, 5 ) )
  }
  ## Now we are ready to create the stimulus objects
  gStimuli <- []
  n <- Length( gStimNames )
  loop( i, Sequence(1,n-1,1) ) {
    c <- MakeColorRGBString( Nth( gStimColors, i ) )
    x <- gVideoWidth/2 + ToNumber(Nth( gStimXOffsets, i ))
    y <- gVideoHeight/2 + ToNumber(Nth( gStimYOffsets, i ))
    shape <- Nth( gStimShapes, i )
    if(  shape == "circle" ) {
       s <- Circle( x, y, 25, c, 1 )
    } elseif( shape == "square" ) {
       s <- Square( x, y, 50, c, 1 )
    } else {
       SignalFatalError( "Unsupported stimulus shape: "+shape )
    }
    PushOnEnd( gStimuli, s )
    AddObject( s, gWindow )
    Hide( s )
  }
}

define ReadPhases() {
  csv <- ReadCSV( "Design/Phases.csv" )
  gPhaseHeader <- First( csv )
  phaseInfo <- Transpose( Rest( csv ) )
  gPhaseNames <-         Nth( phaseInfo, 1 )
  gPhaseStimuli <-       Nth( phaseInfo, 2 )
  gPhasePresentations <- Nth( phaseInfo, 3 )
  gPhaseRewards <-       Nth( phaseInfo, 4 )
}

define ReadParameters() {
  csv <- Transpose( Rest( ReadCSV( "Design/Parameters.csv" ) ) )
  gParameterNames <- Nth(csv, 1)
  gParameterValues <- Nth(csv, 2)
  loop( i, Sequence(1,Length(gParameterNames),1) ) {
    Print( Nth(gParameterNames,i)+" = "+Nth(gParameterValues,i) )
  }
}

define Parameter( name ) {
  n <- Length( gParameterNames )
  value <- Lookup( name, gParameterNames, gParameterValues )
  if(  IsList(value) ) {
    SignalFatalError("Parameter "+name+" not found, or multiply defined")
  }
  return value
}